{"version":3,"sources":["components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js"],"names":["ContactForm","state","name","number","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","className","type","pattern","title","required","onChange","React","Component","ContactList","contacts","onDelete","map","contact","id","onClick","Filter","App","filter","addContactSubmit","data","toLowerCase","includes","trim","alert","uuidv4","prevState","changeFilter","target","getVisibleContacts","onDeleteContact","getAttribute","console","log","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","visibleContacts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6ca3f2e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ContactForm.css';\r\nclass ContactForm extends React.Component {\r\n  state = { name: '', number: '' };\r\n  handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    this.props.onSubmit(this.state);\r\n    this.reset();\r\n  };\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form className=\"form\" onSubmit={this.handleSubmit}>\r\n        <label className=\"label-form\">\r\n          Name\r\n          <input\r\n            className=\"input\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <label className=\"label-form\">\r\n          Number\r\n          <input\r\n            className=\"input\"\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={number}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <button className=\"button-form\" type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import React from 'react';\r\nimport './ContactList.css';\r\nconst ContactList = ({ contacts, onDelete }) => {\r\n  return (\r\n    <ul className=\"list\">\r\n      {contacts.map(contact => (\r\n        <li className=\"item\" key={contact.id}>\r\n          <p className=\"name\">\r\n            {contact.name}: {contact.number}\r\n          </p>\r\n          {\r\n            <button className=\"button\" data-key={contact.id} type=\"button\" name=\"delete\" onClick={onDelete}>\r\n              Delete\r\n            </button>\r\n          }\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\nexport default ContactList;\r\n","import React from 'react';\r\nimport './Filter.css';\r\nconst Filter = ({ value, handleChange }) => {\r\n  return (\r\n    <label className=\"label\">\r\n      Find contacts by name\r\n      <input className=\"input-filter\" type=\"text\" value={value} onChange={handleChange} />\r\n    </label>\r\n  );\r\n};\r\nexport default Filter;\r\n","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\nimport './App.css';\nimport 'modern-normalize/modern-normalize.css';\nclass App extends React.Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n  componentDidMount() {\n    console.log('App componentDidMount');\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n    console.log(parsedContacts);\n  }\n  componentDidUpdate(prevProps, prevState) {\n    console.log('App componentDidUpdate');\n    if (this.state.contacts !== prevState.contacts) {\n      console.log('Обновилось поле contacts');\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n  addContactSubmit = data => {\n    const addContactName = this.state.contacts\n      .map(contact => contact.name.toLowerCase())\n      .includes(data.name.toLowerCase().trim());\n    if (addContactName) {\n      alert(`${data.name} is already in contacts `);\n    } else {\n      const contact = {\n        ...data,\n        id: uuidv4(),\n      };\n      this.setState(prevState => ({\n        contacts: [...prevState.contacts, contact],\n      }));\n    }\n  };\n  changeFilter = e => {\n    this.setState({ filter: e.target.value });\n  };\n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n\n    return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n  };\n\n  onDeleteContact = e => {\n    const id = e.target.getAttribute('data-key');\n\n    this.setState(prevState => {\n      return {\n        contacts: prevState.contacts.filter(contact => contact.id !== id),\n      };\n    });\n  };\n\n  render() {\n    var filter = this.state.filter;\n    const visibleContacts = this.getVisibleContacts();\n    return (\n      <div>\n        <h1 className=\"header\">Phonebook</h1>\n        <ContactForm onSubmit={this.addContactSubmit} />\n        <h2 className=\"title\">Contacts</h2>\n        <Filter value={filter} handleChange={this.changeFilter} />\n        <ContactList contacts={visibleContacts} onDelete={this.onDeleteContact} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}